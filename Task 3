TIC-TAC-TOE AI

def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 9)

def check_win(board, player):
    # Check rows, columns, and diagonals for a win
    for i in range(3):
        if all(board[i][j] == player for j in range(3)) or all(board[j][i] == player for j in range(3)):
            return True
    if all(board[i][i] == player for i in range(3)) or all(board[i][2 - i] == player for i in range(3)):
        return True
    return False

def get_available_moves(board):
    return [(i, j) for i in range(3) for j in range(3) if board[i][j] == " "]
def minimax(board, depth, maximizing_player, alpha, beta):
    if check_win(board, "X"):
        return -1
    if check_win(board, "O"):
        return 1
    if len(get_available_moves(board)) == 0:
        return 0

    if maximizing_player:
        max_eval = float("-inf")
        for move in get_available_moves(board):
            board[move[0]][move[1]] = "O"
            eval = minimax(board, depth + 1, False, alpha, beta)
            board[move[0]][move[1]] = " "
            max_eval = max(max_eval, eval)
            alpha = max(alpha, eval)
            if beta <= alpha:
                break
        return max_eval
    else:
        min_eval = float("inf")
        for move in get_available_moves(board):
            board[move[0]][move[1]] = "X"
            eval = minimax(board, depth + 1, True, alpha, beta)
            board[move[0]][move[1]] = " "
            min_eval = min(min_eval, eval)
            beta = min(beta, eval)
            if beta <= alpha:
                break
        return min_eval
def get_best_move(board):
    best_move = None
    best_eval = float("-inf")
    alpha = float("-inf")
    beta = float("inf")

    for move in get_available_moves(board):
        board[move[0]][move[1]] = "O"
        eval = minimax(board, 0, False, alpha, beta)
        board[move[0]][move[1]] = " "
        if eval > best_eval:
            best_eval = eval
            best_move = move

    return best_move
def play_game():
    board = [[" " for _ in range(3)] for _ in range(3)]
    player_turn = True  # True for human, False for AI

    print("Welcome to Tic-Tac-Toe!")
    print_board(board)

    while len(get_available_moves(board)) > 0:
        if player_turn:
            row, col = map(int, input("Enter your move (row and column, e.g., '0 1'): ").split())
            if board[row][col] == " ":
                board[row][col] = "X"
                player_turn = not player_turn
            else:
                print("Invalid move. Try again.")
        else:
            print("AI's turn...")
            row, col = get_best_move(board)
            board[row][col] = "O"
            player_turn = not player_turn

        print_board(board)

        if check_win(board, "X"):
            print("You win!")
            break
        elif check_win(board, "O"):
            print("AI wins!")
            break
    else:
        print("It's a draw!")

if __name__ == "__main__":
    play_game()
